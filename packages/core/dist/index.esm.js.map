{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["export interface TreeNode {\n    symbols: Array<string>;\n    weight: number;\n    leafs: Array<TreeNode>;\n}\n\n/** ENCODE TEXT */\nexport function encode(text: string, codes: Map<string, string>): Array<string> {\n    const result: Array<string> = [];\n    for (let i = 0; i < text.length; i++) {\n        // @ts-ignore\n        result.push(codes.get(text[i]));\n    }\n    return result;\n}\n\n/** DECODE TEXT */\nexport function decode(text: Array<string>, codes: Map<string, string>): string {\n    let result = '';\n    for (let i = 0; i < text.length; i++) {\n        // eslint-disable-next-line no-loop-func\n        codes.forEach((code, symbol) => {\n            if (text[i] === code) {\n                result += symbol;\n            }\n        });\n    }\n    return result;\n}\n\n/** GET ENTROPY */\nexport function getEntropyOfText(text: string): number {\n    const relFreq: Array<any> = getRelativeFrequency(getFrequency(text));\n    let entropy = 0;\n    for (let i = 0; i < relFreq.length; i++) {\n        entropy += relFreq[i][1] * Math.log2(relFreq[i][1]);\n    }\n    return -entropy;\n}\n\n/** GET SYMBOLS CODES FROM TEXT */\nexport function getCodesFromText(text: string): Map<string, string> {\n    const frequencyArr = getFrequency(text);\n    const symbols = frequencyArr.map((item) => item[0]);\n\n    const tree = getTree(frequencyArr);\n\n    const codes: Map<string, string> = new Map(); // Array with symbols and codes\n    symbols.forEach((element) => {\n        codes.set(element, getSymbolCode(tree, element));\n    });\n\n    return codes;\n}\n\n//** GET RELATIVE FREQUENCY */\nexport function getRelativeFrequency(arr: Array<any>): Array<any> {\n    let length = 0;\n    const resArr: Array<any> = [];\n    for (let i = 0; i < arr.length; i++) {\n        length += arr[i][1];\n    }\n    for (let i = 0; i < arr.length; i++) {\n        const relFreq = arr[i][1] / length;\n        resArr.push([arr[i][0], relFreq]);\n    }\n\n    return resArr;\n}\n\n/** GET CODE FOR SYMBOL */\nfunction getSymbolCode(tree: TreeNode, symbol: string, code = ''): string {\n    let arr = [];\n    if (typeof tree.leafs === undefined) {\n        return code;\n    }\n    arr = tree.leafs;\n\n    if (arr[0].symbols.length === 1 && arr[0].symbols[0] === symbol) return code + 0;\n    if (arr[0].symbols.length === 1 && arr[0].symbols[0] !== symbol) {\n        if (arr[1].symbols.length === 1 && arr[1].symbols[0] === symbol) return code + 1;\n        if (arr[1].symbols.includes(symbol) === true)\n            return getSymbolCode(arr[1], symbol, code + 1);\n    }\n\n    if (arr[1].symbols.length === 1 && arr[1].symbols[0] === symbol) return code + 1;\n    if (arr[1].symbols.length === 1 && arr[1].symbols[0] !== symbol) {\n        if (arr[0].symbols.length === 1 && arr[0].symbols[0] === symbol) return code + 0;\n        if (arr[0].symbols.includes(symbol) === true)\n            return getSymbolCode(arr[0], symbol, code + 0);\n    }\n\n    if (arr[0].symbols.length >= 2 && arr[0].symbols.includes(symbol))\n        return getSymbolCode(arr[0], symbol, code + 0);\n    if (arr[1].symbols.length >= 2 && arr[1].symbols.includes(symbol))\n        return getSymbolCode(arr[1], symbol, code + 1);\n\n    return (Math.random() + 1).toString(36).substring(4);\n}\n\n/** GET SYMBOLS FREQUENCY FROM TEXT */\nexport function getFrequency(text: string): [string, number][] {\n    const freq: Map<string, number> = new Map();\n\n    for (let i = 0; i < text.length; i++) {\n        let counter = 0;\n        for (let j = 0; j < text.length; j++) {\n            if (!freq.has(text[i])) {\n                if (text[i] === text[j] && i !== j) {\n                    counter++;\n                }\n            }\n        }\n        if (!freq.has(text[i])) {\n            freq.set(text[i], counter + 1);\n        }\n    }\n\n    return Array.from(freq).sort((a, b) => b[1] - a[1]); //Descending sort\n}\n\n/** GENERATE HUFFMAN TREE */\nexport function getTree(arr: Array<any>): TreeNode {\n    arr = arr.map((elem) => ({\n        symbols: [elem[0]],\n        weight: elem[1],\n        leafs: [],\n    }));\n\n    let min1;\n    let min2;\n    let node: TreeNode;\n\n    while (arr.length > 2) {\n        min1 = searchMinWeightNode(arr);\n        arr.splice(arr.indexOf(min1), 1);\n        min2 = searchMinWeightNode(arr);\n        arr.splice(arr.indexOf(min2), 1);\n\n        node = createNode(min1, min2);\n        arr.push(node);\n    }\n\n    return createNode(arr[0], arr[1]);\n}\n\n/** CREATE TREE NODE FROM TWO NODES */\nfunction createNode(node1: TreeNode, node2: TreeNode): TreeNode {\n    const weight: number = node1.weight + node2.weight;\n    const symbols: Array<string> = node1.symbols.concat(node2.symbols);\n    const leafs: Array<TreeNode> = [node1, node2];\n    return {\n        symbols,\n        weight,\n        leafs,\n    };\n}\n\n/** SEARCH NODE WITH MINIMAL WEIGHT IN TREE */\nfunction searchMinWeightNode(arr: Array<any>, minNumber = -1): TreeNode {\n    let min = 9999;\n    let result: TreeNode;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].weight <= min && arr[i].weight >= minNumber) {\n            min = arr[i].weight;\n            result = arr[i];\n        }\n    }\n    // @ts-ignore\n    return result;\n}\n"],"names":[],"mappings":"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"}