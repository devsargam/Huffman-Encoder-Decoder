{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["export interface TreeNode {\n    char: string;\n    weight: number;\n    left: TreeNode | null;\n    right: TreeNode | null;\n}\n\n/** ENCODE TEXT */\nexport function encode(text: string, codes: Map<string, string>): Array<string> {\n    const result: Array<string> = [];\n    for (const char of text) {\n        result.push(codes.get(char)!);\n    }\n\n    return result;\n}\n\n/** DECODE TEXT */\nexport function decode(encodedText: Array<string>, codes: Map<string, string>): string {\n    let result = '';\n\n    const reversedCodes: Record<string, string> = {};\n    Array.from(codes.entries()).forEach(([key, value]) => {\n        reversedCodes[value] = key;\n    })\n\n    for (const code of encodedText) {\n        result += reversedCodes[code];\n    }\n    \n    return result;\n}\n\n/** GET ENTROPY */\nexport function getEntropyOfText(text: string): number {\n    const relFreq: Array<any> = getRelativeFrequency(getCharsFrequency(text));\n    let entropy = 0;\n\n    for (let i = 0; i < relFreq.length; i++) {\n        entropy += relFreq[i][1] * Math.log2(relFreq[i][1]);\n    }\n    return -entropy;\n}\n\n/** Create char-to-code Map */\nexport function getCharCodesFromSource(text: string): Map<string, string> {\n    const freqArr = getCharsFrequency(text);\n    const tree = getTree(freqArr);\n\n    const codes: Map<string, string> = new Map(); // Array with symbols and codes\n\n    getCodes(tree, (char, code) => {\n        codes.set(char, code);\n    });\n    return codes;\n}\n\nconst getCodes = (\n    tree: TreeNode | null,\n    cb: (char: string, code: string) => void,\n    code = '',\n): void => {\n    if (!tree) {\n        return;\n    }\n\n    if (!tree.left && !tree.right) {\n        cb(tree.char, code);\n        return;\n    }\n\n    getCodes(tree.left, cb, code + '0');\n    getCodes(tree.right, cb, code + '1');\n};\n\n/** Relative frequency */\nexport function getRelativeFrequency(arr: Array<any>): Array<any> {\n    let length = 0;\n    const resArr: Array<any> = [];\n    for (let i = 0; i < arr.length; i++) {\n        length += arr[i][1];\n    }\n    for (let i = 0; i < arr.length; i++) {\n        const relFreq = arr[i][1] / length;\n        resArr.push([arr[i][0], relFreq]);\n    }\n\n    return resArr;\n}\n\n/** Calculate chars frequency */\nexport function getCharsFrequency(text: string): [string, number][] {\n    const freq: Map<string, number> = new Map();\n\n    for (const char of text) {\n        const count = freq.get(char);\n        freq.set(char, count ? count + 1 : 1);\n    }\n\n    return Array.from(freq).sort((a, b) => b[1] - a[1]); // descending\n}\n\n/** Generate Huffman tree */\nexport function getTree(freq: [string, number][]): TreeNode {\n    const nodes: TreeNode[] = [];\n\n    for (const [char, weight] of freq) {\n        nodes.push({char, weight, left: null, right: null});\n    }\n\n    while (nodes.length > 1) {\n        nodes.sort((a, b) => a.weight - b.weight);\n\n        const left = nodes.shift()!;\n        const right = nodes.shift()!;\n\n        const parent: TreeNode = {char: '', weight: left?.weight + right?.weight, left, right};\n\n        nodes.push(parent);\n    }\n\n    return nodes[0];\n}\n"],"names":[],"mappings":"AAOA;AACgB,SAAA,MAAM,CAAC,IAAY,EAAE,KAA0B,EAAA;IAC3D,MAAM,MAAM,GAAkB,EAAE,CAAC;AACjC,IAAA,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE;QACrB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC,CAAC;AACjC,KAAA;AAED,IAAA,OAAO,MAAM,CAAC;AAClB,CAAC;AAED;AACgB,SAAA,MAAM,CAAC,WAA0B,EAAE,KAA0B,EAAA;IACzE,IAAI,MAAM,GAAG,EAAE,CAAC;IAEhB,MAAM,aAAa,GAA2B,EAAE,CAAC;AACjD,IAAA,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,KAAI;AACjD,QAAA,aAAa,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;AAC/B,KAAC,CAAC,CAAA;AAEF,IAAA,KAAK,MAAM,IAAI,IAAI,WAAW,EAAE;AAC5B,QAAA,MAAM,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC;AACjC,KAAA;AAED,IAAA,OAAO,MAAM,CAAC;AAClB,CAAC;AAED;AACM,SAAU,gBAAgB,CAAC,IAAY,EAAA;IACzC,MAAM,OAAO,GAAe,oBAAoB,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1E,IAAI,OAAO,GAAG,CAAC,CAAC;AAEhB,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACrC,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,KAAA;IACD,OAAO,CAAC,OAAO,CAAC;AACpB,CAAC;AAED;AACM,SAAU,sBAAsB,CAAC,IAAY,EAAA;AAC/C,IAAA,MAAM,OAAO,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC;AACxC,IAAA,MAAM,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAE9B,IAAA,MAAM,KAAK,GAAwB,IAAI,GAAG,EAAE,CAAC;IAE7C,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,KAAI;AAC1B,QAAA,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAC1B,KAAC,CAAC,CAAC;AACH,IAAA,OAAO,KAAK,CAAC;AACjB,CAAC;AAED,MAAM,QAAQ,GAAG,CACb,IAAqB,EACrB,EAAwC,EACxC,IAAI,GAAG,EAAE,KACH;IACN,IAAI,CAAC,IAAI,EAAE;QACP,OAAO;AACV,KAAA;IAED,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;AAC3B,QAAA,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACpB,OAAO;AACV,KAAA;IAED,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC;IACpC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC;AACzC,CAAC,CAAC;AAEF;AACM,SAAU,oBAAoB,CAAC,GAAe,EAAA;IAChD,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,MAAM,MAAM,GAAe,EAAE,CAAC;AAC9B,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACjC,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,KAAA;AACD,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACjC,MAAM,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;AACnC,QAAA,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;AACrC,KAAA;AAED,IAAA,OAAO,MAAM,CAAC;AAClB,CAAC;AAED;AACM,SAAU,iBAAiB,CAAC,IAAY,EAAA;AAC1C,IAAA,MAAM,IAAI,GAAwB,IAAI,GAAG,EAAE,CAAC;AAE5C,IAAA,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE;QACrB,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC7B,QAAA,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AACzC,KAAA;AAED,IAAA,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC;AAED;AACM,SAAU,OAAO,CAAC,IAAwB,EAAA;IAC5C,MAAM,KAAK,GAAe,EAAE,CAAC;IAE7B,KAAK,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,IAAI,EAAE;AAC/B,QAAA,KAAK,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;AACvD,KAAA;AAED,IAAA,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;AACrB,QAAA,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC;AAE1C,QAAA,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,EAAG,CAAC;AAC5B,QAAA,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,EAAG,CAAC;QAE7B,MAAM,MAAM,GAAa,EAAC,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,GAAG,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAC,CAAC;AAEvF,QAAA,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACtB,KAAA;AAED,IAAA,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;AACpB;;;;"}