{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nexport interface TreeNode {\n  node: {\n    data: {\n      v: string;\n    };\n    eData: { e: number };\n    children: TreeNode[];\n  };\n}\n\n/** ENCODE TEXT */\nexport function encode(\n  text: string,\n  codes: Map<string, string>,\n): Array<string> {\n  const result: Array<string> = [];\n  for (const char of text) {\n    result.push(codes.get(char)!);\n  }\n\n  return result;\n}\n\n/** DECODE TEXT */\nexport function decode(\n  encodedText: Array<string>,\n  codes: Map<string, string>,\n): string {\n  let result = '';\n\n  const reversedCodes: Record<string, string> = {};\n  Array.from(codes.entries()).forEach(([key, value]) => {\n    reversedCodes[value] = key;\n  });\n\n  for (const code of encodedText) {\n    result += reversedCodes[code];\n  }\n\n  return result;\n}\n\n/** GET ENTROPY */\nexport function getEntropyOfText(text: string): number {\n  const relFreq: Array<any> = getRelativeFrequency(getCharsFrequency(text));\n  let entropy = 0;\n\n  for (let i = 0; i < relFreq.length; i++) {\n    entropy += relFreq[i][1] * Math.log2(relFreq[i][1]);\n  }\n  return -entropy;\n}\n\n/** Create char-to-code Map */\nexport function getCharCodesFromSource(text: string): Map<string, string> {\n  const freqArr = getCharsFrequency(text);\n  const tree = getTree(freqArr);\n\n  const codes: Map<string, string> = new Map(); // Array with symbols and codes\n\n  getCodes(tree, (char, code) => {\n    codes.set(char, code);\n  });\n  return codes;\n}\n\nconst getCodes = (\n  tree: TreeNode | null,\n  cb: (char: string, code: string) => void,\n  code = '',\n): void => {\n  if (!tree) {\n    return;\n  }\n\n  if (!tree.node.children[0] && !tree.node.children[1]) {\n    cb(tree.node.data.v, code);\n    return;\n  }\n\n  getCodes(tree.node.children[0], cb, code + '0');\n  getCodes(tree.node.children[1], cb, code + '1');\n};\n\n/** Relative frequency */\nexport function getRelativeFrequency(arr: Array<any>): Array<any> {\n  let length = 0;\n  const resArr: Array<any> = [];\n  for (let i = 0; i < arr.length; i++) {\n    length += arr[i][1];\n  }\n  for (let i = 0; i < arr.length; i++) {\n    const relFreq = arr[i][1] / length;\n    resArr.push([arr[i][0], relFreq]);\n  }\n\n  return resArr;\n}\n\n/** Calculate chars frequency */\nexport function getCharsFrequency(text: string): [string, number][] {\n  const freq: Map<string, number> = new Map();\n\n  for (const char of text) {\n    const count = freq.get(char);\n    freq.set(char, count ? count + 1 : 1);\n  }\n\n  return Array.from(freq).sort((a, b) => b[1] - a[1]); // descending\n}\n\n/** Generate Huffman tree */\nexport function getTree(freq: [string, number][]): TreeNode {\n  const nodes: TreeNode[] = [];\n\n  for (const [char, weight] of freq) {\n    nodes.push({\n      node: {\n        data: { v: char || weight.toString() },\n        eData: { e: weight },\n        children: [],\n      },\n    });\n  }\n\n  while (nodes.length > 1) {\n    nodes.sort((a, b) => a.node.eData.e - b.node.eData.e);\n\n    const left = nodes.shift()!;\n    const right = nodes.shift()!;\n\n    const parent: TreeNode = {\n      node: {\n        data: { v: `${left?.node.eData.e + right?.node.eData.e}` },\n        eData: { e: left?.node.eData.e + right?.node.eData.e },\n        children: [left, right],\n      },\n    };\n\n    nodes.push(parent);\n  }\n\n  return nodes[0];\n}\n"],"names":[],"mappings":"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"}